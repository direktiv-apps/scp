// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Secure copy between hosts",
    "title": "scp",
    "version": "1.0",
    "x-direktiv-meta": {
      "categories": [
        "network"
      ],
      "container": "direktiv.azurecr.io/functions/scp",
      "issues": "https://github.com/direktiv-apps/scp/issues",
      "license": "[Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)",
      "long-description": "This function enables to secure copy (SCP) between Direktiv and remote hosts or between two remote hosts. It is recommended to use SSH keys for authentication but  password authentication is supported for the source host.\nIf SCP is required between two remote hosts with password two SCP steps need to be executed. The first step copies the file to Direktiv and the second command copies it  remotely. \nAdditionally the files can be stroed in Direktiv's ` + "`" + `out` + "`" + ` folders to store them for later use, e.g. ` + "`" + `out/workflow/myfile` + "`" + ` would store the file in Direktiv's workflow scope. ",
      "maintainer": "[direktiv.io](https://www.direktiv.io) ",
      "url": "https://github.com/direktiv-apps/scp"
    }
  },
  "paths": {
    "/": {
      "post": {
        "parameters": [
          {
            "type": "string",
            "default": "development",
            "description": "direktiv action id is an UUID. \nFor development it can be set to 'development'\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          },
          {
            "type": "string",
            "default": "/tmp",
            "description": "direktiv temp dir is the working directory for that request\nFor development it can be set to e.g. '/tmp'\n",
            "name": "Direktiv-TempDir",
            "in": "header"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "scp": {
                  "type": "array",
                  "items": {
                    "required": [
                      "source",
                      "target"
                    ],
                    "properties": {
                      "recursive": {
                        "description": "Copy recursivley, e.g folders",
                        "type": "boolean"
                      },
                      "source": {
                        "$ref": "#/definitions/scpPart"
                      },
                      "target": {
                        "$ref": "#/definitions/scpPart"
                      },
                      "verbose": {
                        "description": "Show verbose output",
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of executed scp commands.",
            "schema": {
              "type": "object",
              "properties": {
                "scp": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "success",
                      "result"
                    ],
                    "properties": {
                      "result": {
                        "additionalProperties": false
                      },
                      "success": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "scp": [
                {
                  "result": "copying from a to b",
                  "success": true
                }
              ]
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Direktiv-ErrorCode": {
                "type": "string"
              },
              "Direktiv-ErrorMessage": {
                "type": "string"
              }
            }
          }
        },
        "x-direktiv": {
          "cmds": [
            {
              "action": "foreach",
              "continue": "{{ .Item.Continue }}",
              "exec": "setup.sh '{{ .Item.Source | toJson }}' '{{ .Item.Target | toJson }}' '{{ .Item.Verbose | toJson }}' '{{ .Item.Recursive | toJson }}'",
              "loop": ".Scp",
              "print": false,
              "silent": false
            }
          ],
          "output": "{\n  \"scp\": {{ index . 0 | toJson }}\n}\n"
        },
        "x-direktiv-errors": {
          "io.direktiv.command.error": "Command execution failed",
          "io.direktiv.output.error": "Template error for output generation of the service",
          "io.direktiv.ri.error": "Can not create information object from request"
        },
        "x-direktiv-examples": [
          {
            "content": "- id: scp1 \n  type: action\n  action:\n    secrets: [\"sshkey\"]\n    files: \n    - key: payload\n      scope: workflow\n    function: get\n    input: \n      scp:\n      - source:\n          file: payload\n        target:\n          host: ec2-11-111-99-99.compute-1.amazonaws.com\n          user: ubuntu\n          identity: jq(.secrets.sshkey)\n          file: /tmp/myfile\n  catch:\n  - error: \"io.direktiv.command.error\"",
            "title": "SCP local to remote with certificate"
          },
          {
            "content": "- id: scp2 \n  type: action\n  action:\n    secrets: [\"sshkey\"]\n    function: get\n    input: \n      scp:\n      - source:\n          host: ec2-11-111-99-99.compute-1.amazonaws.com\n          user: ubuntu\n          identity: jq(.secrets.sshkey)\n          file: /tmp/hello1\n        target:\n          host: ec2-11-111-99-100.compute-1.amazonaws.com\n          user: ubuntu\n          identity: jq(.secrets.sshkey)\n          file: /tmp/myfile\n  catch:\n  - error: \"io.direktiv.command.error\"",
            "title": "SCP remote to remote with certificate"
          },
          {
            "content": "- id: getter \n  type: action\n  action:\n    secrets: [\"sshkey\", \"scppwd\"]\n    files: \n    - key: whatever\n      scope: workflow\n      as: payload\n    function: get\n    input: \n      scp:\n      - source:\n          host: ec2-11-111-99-99.compute-1.amazonaws.com\n          user: ubuntu\n          identity: jq(.secrets.sshkey)\n          file: /tmp/hello1\n        target:\n          file: file1\n      - source:\n          file: file1\n        target:\n          host: 192.168.1.1\n          user: direktiv\n          password: jq(.secrets.scppwd)\n          file: /tmp/targetfile\n  catch:\n  - error: \"io.direktiv.command.error\"",
            "title": "Copy with password between remotes"
          },
          {
            "content": "- id: getter \n  type: action\n  action:\n    secrets: [\"scpkey\", \"scppwd\"]\n    files: \n    - key: whatever\n      scope: workflow\n      as: payload\n    function: get\n    input: \n      scp:\n      - source:\n          host: 10.100.6.8\n          user: direktiv\n          password: jq(.secrets.scppwd)\n          file: /tmp/file\n        target:\n          file: out/workflow/myfile.txt\n  catch:\n  - error: \"io.direktiv.command.error\"",
            "title": "Copy with password between remotes"
          }
        ],
        "x-direktiv-function": "functions:\n- id: scp\n  image: direktiv.azurecr.io/functions/scp:1.0\n  type: knative-workflow",
        "x-direktiv-secrets": [
          {
            "description": "SSH key for target or source. Each remote can have a key.",
            "name": "sshkey"
          },
          {
            "description": "Passwords are only allowed for the source of the involved hosts.",
            "name": "scppwd"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "type": "string",
            "description": "On cancel Direktiv sends a DELETE request to\nthe action with id in the header\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-direktiv": {
          "cancel": "echo 'cancel {{ .DirektivActionID }}'"
        }
      }
    }
  },
  "definitions": {
    "direktivFile": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "github.com/direktiv/apps/go/pkg/apps"
        },
        "type": "DirektivFile"
      }
    },
    "error": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "scpPart": {
      "type": "object",
      "required": [
        "file"
      ],
      "properties": {
        "file": {
          "description": "File to copy. In target the Direktiv ` + "`" + `out` + "`" + ` folders can be used, e.g. ` + "`" + `out/workflow/myfile` + "`" + ` to store the file in workflow scope.",
          "type": "string"
        },
        "host": {
          "description": "Hostname of the target or source. Empty if local.",
          "type": "string"
        },
        "identity": {
          "description": "SSH key for the target or source.",
          "type": "string"
        },
        "password": {
          "description": "Password for target or source. Only the source host can use a password. SSH key recommended.",
          "type": "string"
        },
        "port": {
          "description": "Port of the target or source. Empty if local.",
          "type": "integer",
          "default": 22
        },
        "user": {
          "description": "User of the target or source.",
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Secure copy between hosts",
    "title": "scp",
    "version": "1.0",
    "x-direktiv-meta": {
      "categories": [
        "network"
      ],
      "container": "direktiv.azurecr.io/functions/scp",
      "issues": "https://github.com/direktiv-apps/scp/issues",
      "license": "[Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)",
      "long-description": "This function enables to secure copy (SCP) between Direktiv and remote hosts or between two remote hosts. It is recommended to use SSH keys for authentication but  password authentication is supported for the source host.\nIf SCP is required between two remote hosts with password two SCP steps need to be executed. The first step copies the file to Direktiv and the second command copies it  remotely. \nAdditionally the files can be stroed in Direktiv's ` + "`" + `out` + "`" + ` folders to store them for later use, e.g. ` + "`" + `out/workflow/myfile` + "`" + ` would store the file in Direktiv's workflow scope. ",
      "maintainer": "[direktiv.io](https://www.direktiv.io) ",
      "url": "https://github.com/direktiv-apps/scp"
    }
  },
  "paths": {
    "/": {
      "post": {
        "parameters": [
          {
            "type": "string",
            "default": "development",
            "description": "direktiv action id is an UUID. \nFor development it can be set to 'development'\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          },
          {
            "type": "string",
            "default": "/tmp",
            "description": "direktiv temp dir is the working directory for that request\nFor development it can be set to e.g. '/tmp'\n",
            "name": "Direktiv-TempDir",
            "in": "header"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/postParamsBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of executed scp commands.",
            "schema": {
              "$ref": "#/definitions/postOKBody"
            },
            "examples": {
              "scp": [
                {
                  "result": "copying from a to b",
                  "success": true
                }
              ]
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Direktiv-ErrorCode": {
                "type": "string"
              },
              "Direktiv-ErrorMessage": {
                "type": "string"
              }
            }
          }
        },
        "x-direktiv": {
          "cmds": [
            {
              "action": "foreach",
              "continue": "{{ .Item.Continue }}",
              "exec": "setup.sh '{{ .Item.Source | toJson }}' '{{ .Item.Target | toJson }}' '{{ .Item.Verbose | toJson }}' '{{ .Item.Recursive | toJson }}'",
              "loop": ".Scp",
              "print": false,
              "silent": false
            }
          ],
          "output": "{\n  \"scp\": {{ index . 0 | toJson }}\n}\n"
        },
        "x-direktiv-errors": {
          "io.direktiv.command.error": "Command execution failed",
          "io.direktiv.output.error": "Template error for output generation of the service",
          "io.direktiv.ri.error": "Can not create information object from request"
        },
        "x-direktiv-examples": [
          {
            "content": "- id: scp1 \n  type: action\n  action:\n    secrets: [\"sshkey\"]\n    files: \n    - key: payload\n      scope: workflow\n    function: get\n    input: \n      scp:\n      - source:\n          file: payload\n        target:\n          host: ec2-11-111-99-99.compute-1.amazonaws.com\n          user: ubuntu\n          identity: jq(.secrets.sshkey)\n          file: /tmp/myfile\n  catch:\n  - error: \"io.direktiv.command.error\"",
            "title": "SCP local to remote with certificate"
          },
          {
            "content": "- id: scp2 \n  type: action\n  action:\n    secrets: [\"sshkey\"]\n    function: get\n    input: \n      scp:\n      - source:\n          host: ec2-11-111-99-99.compute-1.amazonaws.com\n          user: ubuntu\n          identity: jq(.secrets.sshkey)\n          file: /tmp/hello1\n        target:\n          host: ec2-11-111-99-100.compute-1.amazonaws.com\n          user: ubuntu\n          identity: jq(.secrets.sshkey)\n          file: /tmp/myfile\n  catch:\n  - error: \"io.direktiv.command.error\"",
            "title": "SCP remote to remote with certificate"
          },
          {
            "content": "- id: getter \n  type: action\n  action:\n    secrets: [\"sshkey\", \"scppwd\"]\n    files: \n    - key: whatever\n      scope: workflow\n      as: payload\n    function: get\n    input: \n      scp:\n      - source:\n          host: ec2-11-111-99-99.compute-1.amazonaws.com\n          user: ubuntu\n          identity: jq(.secrets.sshkey)\n          file: /tmp/hello1\n        target:\n          file: file1\n      - source:\n          file: file1\n        target:\n          host: 192.168.1.1\n          user: direktiv\n          password: jq(.secrets.scppwd)\n          file: /tmp/targetfile\n  catch:\n  - error: \"io.direktiv.command.error\"",
            "title": "Copy with password between remotes"
          },
          {
            "content": "- id: getter \n  type: action\n  action:\n    secrets: [\"scpkey\", \"scppwd\"]\n    files: \n    - key: whatever\n      scope: workflow\n      as: payload\n    function: get\n    input: \n      scp:\n      - source:\n          host: 10.100.6.8\n          user: direktiv\n          password: jq(.secrets.scppwd)\n          file: /tmp/file\n        target:\n          file: out/workflow/myfile.txt\n  catch:\n  - error: \"io.direktiv.command.error\"",
            "title": "Copy with password between remotes"
          }
        ],
        "x-direktiv-function": "functions:\n- id: scp\n  image: direktiv.azurecr.io/functions/scp:1.0\n  type: knative-workflow",
        "x-direktiv-secrets": [
          {
            "description": "SSH key for target or source. Each remote can have a key.",
            "name": "sshkey"
          },
          {
            "description": "Passwords are only allowed for the source of the involved hosts.",
            "name": "scppwd"
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "type": "string",
            "description": "On cancel Direktiv sends a DELETE request to\nthe action with id in the header\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-direktiv": {
          "cancel": "echo 'cancel {{ .DirektivActionID }}'"
        }
      }
    }
  },
  "definitions": {
    "direktivFile": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "github.com/direktiv/apps/go/pkg/apps"
        },
        "type": "DirektivFile"
      }
    },
    "error": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "postOKBody": {
      "type": "object",
      "properties": {
        "scp": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/postOKBodyScpItems"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "postOKBodyScpItems": {
      "type": "object",
      "required": [
        "success",
        "result"
      ],
      "properties": {
        "result": {
          "additionalProperties": false
        },
        "success": {
          "type": "boolean"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postParamsBody": {
      "type": "object",
      "properties": {
        "scp": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/postParamsBodyScpItems"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "postParamsBodyScpItems": {
      "required": [
        "source",
        "target"
      ],
      "properties": {
        "recursive": {
          "description": "Copy recursivley, e.g folders",
          "type": "boolean"
        },
        "source": {
          "$ref": "#/definitions/scpPart"
        },
        "target": {
          "$ref": "#/definitions/scpPart"
        },
        "verbose": {
          "description": "Show verbose output",
          "type": "boolean"
        }
      },
      "x-go-gen-location": "operations"
    },
    "scpPart": {
      "type": "object",
      "required": [
        "file"
      ],
      "properties": {
        "file": {
          "description": "File to copy. In target the Direktiv ` + "`" + `out` + "`" + ` folders can be used, e.g. ` + "`" + `out/workflow/myfile` + "`" + ` to store the file in workflow scope.",
          "type": "string"
        },
        "host": {
          "description": "Hostname of the target or source. Empty if local.",
          "type": "string"
        },
        "identity": {
          "description": "SSH key for the target or source.",
          "type": "string"
        },
        "password": {
          "description": "Password for target or source. Only the source host can use a password. SSH key recommended.",
          "type": "string"
        },
        "port": {
          "description": "Port of the target or source. Empty if local.",
          "type": "integer",
          "default": 22
        },
        "user": {
          "description": "User of the target or source.",
          "type": "string"
        }
      }
    }
  }
}`))
}
