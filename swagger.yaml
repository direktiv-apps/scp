swagger: "2.0"
info:
  description: Secure copy between hosts
  title: scp
  version: "1.0"
  x-direktiv-meta:
    container: direktiv.azurecr.io/functions/scp
    maintainer: |-
      [direktiv.io](https://www.direktiv.io) 
    issues: https://github.com/direktiv-apps/scp/issues
    url: https://github.com/direktiv-apps/scp  
    categories:
    - network
    license: |-
      [Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)
    long-description: >-
      This function enables to secure copy (SCP) between Direktiv and remote hosts or between two remote hosts. It is recommended to use SSH keys for authentication but 
      password authentication is supported for the source host.
      
      If SCP is required between two remote hosts with password two SCP steps need to be executed. The first step copies the file to Direktiv and the second command copies it 
      remotely. 

      Additionally the files can be stroed in Direktiv's `out` folders to store them for later use, e.g. `out/workflow/myfile` would store the file in Direktiv's workflow scope. 
consumes:
- application/json
produces:
- application/json
schemes:
- http
paths:
  /: 
    delete:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          description: |
            On cancel Direktiv sends a DELETE request to
            the action with id in the header
      x-direktiv:
        cancel: echo 'cancel {{ .DirektivActionID }}'
      responses:
        200:
    post:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          default: development
          description: |
            direktiv action id is an UUID. 
            For development it can be set to 'development'
        - name: Direktiv-TempDir
          in: header
          type: string
          default: /tmp
          description: |
            direktiv temp dir is the working directory for that request
            For development it can be set to e.g. '/tmp'
        - name: body
          in: body
          schema:
            type: object
            properties:
              scp:
                type: array
                items:
                  required:
                    - source
                    - target
                  properties:
                    source:
                      $ref: '#/definitions/scpPart'
                    target:
                      $ref: '#/definitions/scpPart'
                    recursive:
                      type: boolean
                      description: Copy recursivley, e.g folders
                    verbose:
                      type: boolean
                      description: Show verbose output
      x-direktiv-function: |-
        functions:
        - id: scp
          image: direktiv.azurecr.io/functions/scp:1.0
          type: knative-workflow
      x-direktiv-examples:
        - title: SCP local to remote with certificate
          content: |-
            - id: scp1 
              type: action
              action:
                secrets: ["sshkey"]
                files: 
                - key: payload.txt
                  scope: workflow
                function: scp
                input: 
                  scp:
                  - source:
                      file: payload.txt
                    target:
                      host: ec2-11-111-99-99.compute-1.amazonaws.com
                      user: ubuntu
                      identity: jq(.secrets.sshkey)
                      file: /tmp/myfile
              catch:
              - error: "io.direktiv.command.error"
        - title: SCP remote to remote with certificate
          content: |-
            - id: scp2 
              type: action
              action:
                secrets: ["sshkey"]
                function: scp
                input: 
                  scp:
                  - source:
                      host: ec2-11-111-99-99.compute-1.amazonaws.com
                      user: ubuntu
                      identity: jq(.secrets.sshkey)
                      file: /tmp/hello1
                    target:
                      host: ec2-11-111-99-100.compute-1.amazonaws.com
                      user: ubuntu
                      identity: jq(.secrets.sshkey)
                      file: /tmp/myfile
              catch:
              - error: "io.direktiv.command.error"
        - title: Copy with password between remotes
          content: |-
            - id: getter 
              type: action
              action:
                secrets: ["sshkey", "scppwd"]
                function: scp
                input: 
                  scp:
                  - source:
                      host: ec2-11-111-99-99.compute-1.amazonaws.com
                      user: ubuntu
                      identity: jq(.secrets.sshkey)
                      file: /tmp/hello1
                    target:
                      file: file1
                  - source:
                      file: file1
                    target:
                      host: 192.168.1.1
                      user: direktiv
                      password: jq(.secrets.scppwd)
                      file: /tmp/targetfile
              catch:
              - error: "io.direktiv.command.error"
        - title: Copy with password between remotes
          content: |-
            - id: getter 
              type: action
              action:
                secrets: ["scpkey", "scppwd"]
                function: scp
                input: 
                  scp:
                  - source:
                      host: 10.100.6.8
                      user: direktiv
                      password: jq(.secrets.scppwd)
                      file: /tmp/file
                    target:
                      file: out/workflow/myfile.txt
              catch:
              - error: "io.direktiv.command.error"
      x-direktiv-secrets:
        - name: sshkey
          description: SSH key for target or source. Each remote can have a key. 
        - name: scppwd
          description: Passwords are only allowed for the source of the involved hosts.
      x-direktiv:  
        cmds:
        - action: foreach
          loop: .Scp
          exec: setup.sh '{{ .Item.Source | toJson }}' '{{ .Item.Target | toJson }}' '{{ .Item.Verbose | toJson }}' '{{ .Item.Recursive | toJson }}' 
          continue: '{{ .Item.Continue }}'
          print: false
          silent: false
        output: |
          {
            "scp": {{ index . 0 | toJson }}
          }
      x-direktiv-errors:
        io.direktiv.command.error: Command execution failed
        io.direktiv.output.error: Template error for output generation of the service
        io.direktiv.ri.error: Can not create information object from request
      responses:
        200:
          description: List of executed scp commands.
          examples:
            scp:
              - result: 'copying from a to b'
                success: true
          schema:
            type: object
            properties:
              scp:
                type: array
                items:
                  type: object
                  required:
                  - success
                  - result
                  properties:
                    success:
                      type: boolean
                    result:
                      additionalProperties: {}
        default:
          description: generic error response
          headers:
            Direktiv-ErrorCode:
              type: string
            Direktiv-ErrorMessage:
              type: string
          schema:
            $ref: "#/definitions/error"
definitions:
  direktivFile:
    type: object
    x-go-type:
      type: DirektivFile
      import:
        package: github.com/direktiv/apps/go/pkg/apps 
  error:
    type: object
    required:
      - errorCode
      - errorMessage
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string

  scpPart:
    type: object
    required: ["file"]
    properties:
      host:
        type: string
        description: Hostname of the target or source. Empty if local.
      port: 
        type: integer
        default: 22
        description: Port of the target or source. Empty if local.
      user:
        type: string
        description: User of the target or source.
      identity: 
        type: string
        description: SSH key for the target or source.
      password:
        type: string
        description: Password for target or source. Only the source host can use a password. SSH key recommended. 
      file:
        type: string
        description: File to copy. In target the Direktiv `out` folders can be used, e.g. `out/workflow/myfile` to store the file in workflow scope.
